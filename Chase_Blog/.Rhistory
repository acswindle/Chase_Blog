import numpy as np
import matplotlib.pyplot as plt
samples = 100
sd = 0.3
x = np.random.uniform(size=samples)
eps = sd*np.random.normal(size=samples)
real = np.sin(2*np.pi*x)
y = real + eps
xreal = np.linspace(0,1,1000)
real = np.sin(2*np.pi*xreal)
plt.figure(figsize=(12,6))
plt.scatter(x,y)
plt.plot(xreal,real,'--r',label='Actual $f(x)$')
plt.plot(xreal,pred,'-g',label='Predicted $f(x)$')
plt.show()
samples = 100
sd = 0.3
x = np.random.uniform(size=samples)
eps = sd*np.random.normal(size=samples)
real = np.sin(2*np.pi*x)
y = real + eps
xreal = np.linspace(0,1,1000)
real = np.sin(2*np.pi*xreal)
plt.figure(figsize=(12,6))
plt.scatter(x,y)
plt.plot(xreal,real,'--r',label='Actual $f(x)$')
plt.plot(xreal,pred,'-g',label='Predicted $f(x)$')
import numpy as np
import matplotlib.pyplot as plt
samples = 100
sd = 0.3
x = np.random.uniform(size=samples)
eps = sd*np.random.normal(size=samples)
real = np.sin(2*np.pi*x)
y = real + eps
xreal = np.linspace(0,1,1000)
real = np.sin(2*np.pi*xreal)
plt.figure(figsize=(12,6))
plt.scatter(x,y)
plt.plot(xreal,real,'--r',label='Actual $f(x)$')
plt.plot(xreal,pred,'-g',label='Predicted $f(x)$')
samples = 100
sd = 0.3
x = np.random.uniform(size=samples)
eps = sd*np.random.normal(size=samples)
real = np.sin(2*np.pi*x)
y = real + eps
xreal = np.linspace(0,1,1000)
real = np.sin(2*np.pi*xreal)
plt.figure(figsize=(12,6))
plt.scatter(x,y)
plt.plot(xreal,real,'--r',label='Actual $f(x)$')
#plt.plot(xreal,pred,'-g',label='Predicted $f(x)$')
samples = 100
sd = 0.3
x = np.random.uniform(size=samples)
eps = sd*np.random.normal(size=samples)
real = np.sin(2*np.pi*x)
y = real + eps
xreal = np.linspace(0,1,1000)
real = np.sin(2*np.pi*xreal)
plt.figure(figsize=(12,6))
plt.scatter(x,y)
plt.plot(xreal,real,'--r',label='Actual $f(x)$')
plt.show()
#plt.plot(xreal,pred,'-g',label='Predicted $f(x)$')
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('seaborne-whitegrid')
samples = 100
sd = 0.3
x = np.random.uniform(size=samples)
eps = sd*np.random.normal(size=samples)
real = np.sin(2*np.pi*x)
y = real + eps
xreal = np.linspace(0,1,1000)
real = np.sin(2*np.pi*xreal)
plt.figure(figsize=(12,6))
plt.scatter(x,y)
plt.plot(xreal,real,'--r',label='Actual $f(x)$')
plt.show()
#plt.plot(xreal,pred,'-g',label='Predicted $f(x)$')
samples = 100
sd = 0.3
x = np.random.uniform(size=samples)
eps = sd*np.random.normal(size=samples)
real = np.sin(2*np.pi*x)
y = real + eps
xreal = np.linspace(0,1,1000)
real = np.sin(2*np.pi*xreal)
plt.figure(figsize=(8,6))
plt.scatter(x,y)
plt.plot(xreal,real,'--r',label='Actual $f(x)$')
plt.show()
#plt.plot(xreal,pred,'-g',label='Predicted $f(x)$')
samples = 100
sd = 0.3
x = np.random.uniform(size=samples)
eps = sd*np.random.normal(size=samples)
real = np.sin(2*np.pi*x)
y = real + eps
xreal = np.linspace(0,1,1000)
real = np.sin(2*np.pi*xreal)
plt.figure(figsize=(8,6))
plt.scatter(x,y)
plt.plot(xreal,real,'--r',label='Actual $f(x)$')
plt.show()
plt.xlabel("X")
plt.ylabel("Y")
#plt.plot(xreal,pred,'-g',label='Predicted $f(x)$')
samples = 100
sd = 0.3
x = np.random.uniform(size=samples)
eps = sd*np.random.normal(size=samples)
real = np.sin(2*np.pi*x)
y = real + eps
xreal = np.linspace(0,1,1000)
real = np.sin(2*np.pi*xreal)
plt.figure(figsize=(8,6))
plt.scatter(x,y)
plt.plot(xreal,real,'--r',label='Actual $f(x)$')
plt.xlabel("X")
plt.ylabel("Y")
plt.show()
#plt.plot(xreal,pred,'-g',label='Predicted $f(x)$')
samples = 100
sd = 0.3
x = np.random.uniform(size=samples)
eps = sd*np.random.normal(size=samples)
real = np.sin(2*np.pi*x)
y = real + eps
xreal = np.linspace(0,1,1000)
real = np.sin(2*np.pi*xreal)
plt.figure(figsize=(8,6))
plt.style.use('seaborn-whitegrid')
plt.scatter(x,y)
plt.plot(xreal,real,'--r',label='Actual $f(x)$')
plt.xlabel("X")
plt.ylabel("Y")
plt.show()
#plt.plot(xreal,pred,'-g',label='Predicted $f(x)$')
samples = 100
sd = 0.3
x = np.random.uniform(size=samples)
eps = sd*np.random.normal(size=samples)
real = np.sin(2*np.pi*x)
y = real + eps
xreal = np.linspace(0,1,1000)
real = np.sin(2*np.pi*xreal)
plt.figure(figsize=(8,6))
plt.style.use('seaborn-whitegrid')
plt.scatter(x,y,label="Observed")
plt.plot(xreal,real,'--r',label='Actual $f(x)$')
plt.xlabel("X")
plt.ylabel("Y")
plt.legend(
plt.show()
#plt.plot(xreal,pred,'-g',label='Predicted $f(x)$')
quit
samples = 100
sd = 0.3
x = np.random.uniform(size=samples)
eps = sd*np.random.normal(size=samples)
real = np.sin(2*np.pi*x)
y = real + eps
xreal = np.linspace(0,1,1000)
real = np.sin(2*np.pi*xreal)
plt.figure(figsize=(8,6))
plt.style.use('seaborn-whitegrid')
plt.scatter(x,y,label="Observed")
plt.plot(xreal,real,'--r',label='Actual $f(x)$')
plt.xlabel("X")
plt.ylabel("Y")
plt.legend()
plt.show()
#plt.plot(xreal,pred,'-g',label='Predicted $f(x)$')
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
setwd("~/Projects/Chase_Blog/Chase_Blog")
df <- read.csv("HW3_data.csv")
df
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
x1 <- matrix(nrow = n, ncol = 2)
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
x1 <- matrix(nrow = n, ncol = 2)
x1[,1] <- 1
x1[,2] <- x
x1 <- matrix(nrow = n, ncol = 2)
x1[,1] <- 1
x1[,2] <- x
solve(t(x1) %*% x1) %*% x1
x1 <- matrix(nrow = n, ncol = 2)
x1[,1] <- 1
x1[,2] <- x
solve(t(x1) %*% x1) %*% t(x1)
x1 <- matrix(nrow = n, ncol = 2)
x1[,1] <- 1
x1[,2] <- x
solve(t(x1) %*% x1) %*% t(x1) %*%y
#model 1
x1 <- matrix(nrow = n, ncol = 2)
x1[,1] <- 1
x1[,2] <- x
beta1 <- solve(t(x1) %*% x1) %*% t(x1) %*%y
#model 2
x2 <- matrix(nrow = n, ncol = 2)
x2[,1] <- 1
x2[,2] <- m
beta2 <- solve(t(x2) %*% x2) %*% t(x2) %*%y
#model 1
x1 <- matrix(nrow = n, ncol = 2)
x1[,1] <- 1
x1[,2] <- x
beta1 <- solve(t(x1) %*% x1) %*% t(x1) %*%y
#model 2
x2 <- matrix(nrow = n, ncol = 2)
x2[,1] <- 1
x2[,2] <- m
beta2 <- solve(t(x2) %*% x2) %*% t(x2) %*%y
#model 3
x3 <- matrix(nrow = n, ncol = 3)
x3[,1] <- 1
x3[,2] <- m
x3[,3] <- m
beta3 <- solve(t(x3) %*% x3) %*% t(x3) %*%y
#model 1
x1 <- matrix(nrow = n, ncol = 2)
x1[,1] <- 1
x1[,2] <- x
beta1 <- solve(t(x1) %*% x1) %*% t(x1) %*%y
#model 2
x2 <- matrix(nrow = n, ncol = 2)
x2[,1] <- 1
x2[,2] <- m
beta2 <- solve(t(x2) %*% x2) %*% t(x2) %*%y
#model 3
x3 <- matrix(nrow = n, ncol = 3)
x3[,1] <- 1
x3[,2] <- m
x3[,3] <- x
beta3 <- solve(t(x3) %*% x3) %*% t(x3) %*%y
#model 1
x1 <- matrix(nrow = n, ncol = 2)
x1[,1] <- 1
x1[,2] <- x
beta1 <- solve(t(x1) %*% x1) %*% t(x1) %*%y
#model 2
x2 <- matrix(nrow = n, ncol = 2)
x2[,1] <- 1
x2[,2] <- m
beta2 <- solve(t(x2) %*% x2) %*% t(x2) %*%y
#model 3
x3 <- matrix(nrow = n, ncol = 3)
x3[,1] <- 1
x3[,2] <- m
x3[,3] <- x
beta3 <- solve(t(x3) %*% x3) %*% t(x3) %*%y
beta1
#model 1
x1 <- matrix(nrow = n, ncol = 2)
x1[,1] <- 1
x1[,2] <- x
beta1 <- solve(t(x1) %*% x1) %*% t(x1) %*%y
#model 2
x2 <- matrix(nrow = n, ncol = 2)
x2[,1] <- 1
x2[,2] <- m
beta2 <- solve(t(x2) %*% x2) %*% t(x2) %*%y
#model 3
x3 <- matrix(nrow = n, ncol = 3)
x3[,1] <- 1
x3[,2] <- m
x3[,3] <- x
beta3 <- solve(t(x3) %*% x3) %*% t(x3) %*%y
beta2
#model 1
x1 <- matrix(nrow = n, ncol = 2)
x1[,1] <- 1
x1[,2] <- x
beta1 <- solve(t(x1) %*% x1) %*% t(x1) %*%y
#model 2
x2 <- matrix(nrow = n, ncol = 2)
x2[,1] <- 1
x2[,2] <- m
beta2 <- solve(t(x2) %*% x2) %*% t(x2) %*%y
#model 3
x3 <- matrix(nrow = n, ncol = 3)
x3[,1] <- 1
x3[,2] <- m
x3[,3] <- x
beta3 <- solve(t(x3) %*% x3) %*% t(x3) %*%y
beta3
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
lm(y ~ x,df)
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
summary(lm(y ~ x,df))
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
summary(lm(x ~ m,df))
#model 1
x1 <- matrix(nrow = n, ncol = 2)
x1[,1] <- 1
x1[,2] <- x
beta1 <- solve(t(x1) %*% x1) %*% t(x1) %*%y
#model 2
x2 <- matrix(nrow = n, ncol = 2)
x2[,1] <- 1
x2[,2] <- m
beta2 <- solve(t(x2) %*% x2) %*% t(x2) %*%x
#model 3
x3 <- matrix(nrow = n, ncol = 3)
x3[,1] <- 1
x3[,2] <- m
x3[,3] <- x
beta3 <- solve(t(x3) %*% x3) %*% t(x3) %*%y
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
summary(lm(y ~ x + m,df))
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
summary(lm(y ~ 1,df))
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
summary(lm(y ~ x,df))
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
summary(lm(y ~ m,df))
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
summary(lm(y ~ m-1,df))
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
summary(lm(y ~ m,df))
var_beta_22 = 1/sum(x^2)
var_beta_22 = 1/sum(m^2)
z <- (beta1[2] - beta3[3]) / sqrt(beta2[2]^2 * var_beta_22 + beta3[2]*var_beta_32)
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
summary(lm(m ~ x,df))
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
#model 1
x1 <- matrix(nrow = n, ncol = 2)
x1[,1] <- 1
x1[,2] <- x
beta1 <- solve(t(x1) %*% x1) %*% t(x1) %*%y
#model 2
x2 <- matrix(nrow = n, ncol = 2)
x2[,1] <- 1
x2[,2] <- x
beta2 <- solve(t(x2) %*% x2) %*% t(x2) %*%m
#model 3
x3 <- matrix(nrow = n, ncol = 3)
x3[,1] <- 1
x3[,2] <- m
x3[,3] <- x
beta3 <- solve(t(x3) %*% x3) %*% t(x3) %*%y
var_beta_22 = 1/sum(x^2)
var_beta_32 = 1/sum(m^2)
z <- (beta1[2] - beta3[3]) / sqrt(beta2[2]^2 * var_beta_22 + beta3[2]*var_beta_32)
z <- (beta1[2] - beta3[3]) / sqrt(beta2[2]^2 * var_beta_22 + beta3[2]*var_beta_32)
z
z <- (beta1[2] - beta3[3]) / sqrt(beta2[2]^2 * var_beta_22 + beta3[2]^2*var_beta_32)
z
p <- (1-pnorm(z))*2
p
pnorm(z)
pnorm(z)
pnorm(z)
pnorm(z)
beta2[2]
x
x^2
sum(x^2)
1/sum(x^2)
p <- pnorm(0.5)
p <- pnorm(0.5)
p
p <- pnorm(1)
p
p <- pnorm(1.97)
p
p <- pnorm(1.96)
p
p <- pnorm(z)
p
p <- 1-pnorm(z)
p
p <- (1-pnorm(z))*2
p
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
scatter(x,m)
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
plot(x,m)
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
plot(y,x)
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
plot(y,m)
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
plot(y,x)
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
plot(y,m)
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
plot(x,m)
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
df
df <- read.csv("HW3_data.csv")
y <- df$y
m <- df$m
x <- df$x
n <- length(y)
blogdown:::serve_site()
knitr::opts_chunk$set(collapse = TRUE)
summary(Orange)
